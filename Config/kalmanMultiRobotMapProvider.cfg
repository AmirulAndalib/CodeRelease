	// Parameters used by the RemoteRobotMapProvider.
parameters = {

		// Validity related parameters of the multi kalman model for local percepts.
	localPercept = {
			// Use this validity for new hypotheses.
		hypotheses_initialValidityForNewHypotheses = 0.2;
		
			// Defines the number of percepts/s which leads to a validity of 1.
			// No percept leads to a validity of 0.
		validity_maxPerceptsPerSecond = 5.0;
			// Defines the number of percepts/s which is required for a valid hypothesis.
		validity_minPerceptsPerSecond = 1.0;
			// Defines the number of percepts/s which is required for a good validity.
		validity_goodPerceptsPerSecond = 3.0;
			// The percepts/s from the last second is merged with the previous validity
			// using a weighted mean. The last seconds percepts/s has weight 1 and this
			// parameter defines the weight of the previous validity.
		validity_weightOfPreviousValidity = 30;
			// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
			// Validity_goodPerceptsPerSecond.
		validity_weightOfPreviousValidity_goodHypotheses = 60.0;
			// If the validity of a hypothesis is less than this threshold (and there 
			// is a better one), the hypothesis will be removed.
		cleanUpHypotheses_belowValidity = 0.15;
	};

		// Validity related parameters of the multi kalman model for remote models.
	remoteModel = {
			// Use this validity for new hypotheses.
		hypotheses_initialValidityForNewHypotheses = 0.65;
		
			// Defines the number of percepts/s which leads to a validity of 1.
			// No percept leads to a validity of 0.
		validity_maxPerceptsPerSecond = 2.0;
			// Defines the number of percepts/s which is required for a valid hypothesis.
		validity_minPerceptsPerSecond = 1.0;
			// Defines the number of percepts/s which is required for a good validity.
		validity_goodPerceptsPerSecond = 1.5;
			// The percepts/s from the last second is merged with the previous validity
			// using a weighted mean. The last seconds percepts/s has weight 1 and this
			// parameter defines the weight of the previous validity.
		validity_weightOfPreviousValidity = 55.0;
			// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
			// Validity_goodPerceptsPerSecond.
		validity_weightOfPreviousValidity_goodHypotheses = 100.0;
			// If the validity of a hypothesis is less than this threshold (and there 
			// is a better one), the hypothesis will be removed.
		cleanUpHypotheses_belowValidity = 0.15;
	};
	
		// Local map only parameters
	localMapParameters = {
            // Distance up to which the percepts are merged using a distance-based
            // approach. If the percepts are further away, an angle-based approach is used.
        maxDistanceForDistanceBasedMerging = 600;
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 225;
        maxAngleDiffToMerge = {
          x = 1.75deg;
          y = 2.5deg;
        };
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
		maxRobotTypeDifferenceToMerge = 1.0;
	};

	    // Remote map only parameters
    remoteMapParameters = {
            // Distance up to which the percepts are merged using a distance-based
            // approach. If the percepts are further away, an angle-based approach is used.
        maxDistanceForDistanceBasedMerging = 600;
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 325;
        maxAngleDiffToMerge = {
          x = 2deg;
          y = 4.5deg;
        };
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
		maxRobotTypeDifferenceToMerge = 1.0;
			// The influence of a teammate position. This will be multiplied by the teammate's position confidence
		teammatePositionInfluence = 1.0;
			// The influence of a teammate's robot model. This will be multiplied by the teammate's robot model validity
		teammateModelInfluence = 0.8;
			// The influence of a teammate's percept. This will be multiplied by the teammate's robot percept validity
		teammatePerceptInfluence = 0.0;
	};

		// Merged map only parameters
	mergedMapParameters = {
            // Distance up to which the percepts are merged using a distance-based
            // approach. If the percepts are further away, an angle-based approach is used.
        maxDistanceForDistanceBasedMerging = 600;
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 350;
        maxAngleDiffToMerge = {
          x = 2deg;
          y = 4.5deg;
        };
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
		maxRobotTypeDifferenceToMerge = 1.0;
			// The influence of a local robot percept. This will be multiplied by the percept's validity
		localPerceptInfluence = 1.0;
			// The influence of a teammate position. This will be multiplied by the teammate's position confidence
		teammatePositionInfluence = 1.0;
			// The influence of a teammate's robot model. This will be multiplied by the teammate's robot model validity
		teammateModelInfluence = 0.8;
			// The influence of a teammate's percept. This will be multiplied by the teammate's robot percept validity
		teammatePerceptInfluence = 0.0;	
	};


		// Slow down the velocity of the fitered robot hypotheses when unseen.
		// The friction value must be <= 0 (0 if no friction should be applied).
	friction = -20.0; // Prevent high velocity noise

		// If true hypotheses outside the field (with CleanUpHypotheses_fieldBorderThreshold)
		// are removed (also the best one).
		// Warning: This could be dangerous if the localization is too inaccurate!
	cleanUpHypotheses_outsideField = true;
		// The field border (all legal positions are inside) is enlarged by this
		// size (in mm) for clean up. Only hypotheses outside this threshold are removed.
		// See CleanUpHypotheses_outsideField.
	cleanUpHypotheses_fieldBorderThreshold = 200.0;
};


	// Fix kalman filter matrices which are used to initialize the kalman filter of 
	// each new hypothesis.
kalmanNoiseMatrices = {
	// The process noise covariance matrix (Q).
	processNoiseCovarianceMatrix = {
		cols = [ // column matrices!
			{ elems = [ 500, 0, 0.0, 0 ]; },
			{ elems = [ 0, 500, 0, 0.0 ]; },
			{ elems = [ 0.0, 0, 1, 0 ]; },
			{ elems = [ 0, 0.0, 0, 1 ]; }
		];
	};
	// The measurement noise matrix (R).
	measurementNoiseMatrix = {
		cols = [ // column matrices!
			{ elems = [ 1000, 0 ]; },
			{ elems = [ 0, 1000 ]; }
		];
	};
	// The maximum measurement noise as a scalar value.
    maxMeasurementNoise = 1000;
};
