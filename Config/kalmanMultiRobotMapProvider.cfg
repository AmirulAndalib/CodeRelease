	// Parameters used by the RemoteRobotMapProvider.
parameters = {

		// Validity related parameters of the multi kalman model for local percepts.
	localPercept = {
			// If a percept has at least this distance to all existing 
			// hypotheses, a new hypothesis is created with position from percept 
			// (distance in mm).
		hypotheses_minDistanceForNewHypothesis = 500.0;
			// Use this validity for new hypotheses.
		hypotheses_initialValidityForNewHypotheses = 0.16;

			// Only hypotheses with at least this validity can become the best hypothesis 
			// of a MultipleKalmanModel. If all hypotheses are below this threshold the 
			// last best hypothesis is retained.
		hypotheses_minValidityForChangingBestHypothesis = 0.5;
		
			// Defines the number of percepts/s which leads to a validity of 1.
			// No percept leads to a validity of 0.
		validity_maxPerceptsPerSecond = 4.0;
			// Defines the number of percepts/s which is required for a valid hypothesis.
		validity_minPerceptsPerSecond = 1.0;
			// Defines the number of percepts/s which is required for a good validity.
		validity_goodPerceptsPerSecond = 2.5;
			// The percepts/s from the last second is merged with the previous validity
			// using a weighted mean. The last seconds percepts/s has weight 1 and this
			// parameter defines the weight of the previous validity.
		validity_weightOfPreviousValidity = 20.0;
			// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
			// Validity_goodPerceptsPerSecond.
		validity_weightOfPreviousValidity_goodHypotheses = 50.0;
			// If the validity of a hypothesis is less than this threshold (and there 
			// is a better one), the hypothesis will be removed.
		cleanUpHypotheses_belowValidity = 0.15;
	};

		// Validity related parameters of the multi kalman model for remote models.
	remoteModel = {
			// If a percept has at least this distance to all existing 
			// hypotheses, a new hypothesis is created with position from percept 
			// (distance in mm).
		hypotheses_minDistanceForNewHypothesis = 500.0;
			// Use this validity for new hypotheses.
		hypotheses_initialValidityForNewHypotheses = 0.16;

			// Only hypotheses with at least this validity can become the best hypothesis 
			// of a MultipleKalmanModel. If all hypotheses are below this threshold the 
			// last best hypothesis is retained.
		hypotheses_minValidityForChangingBestHypothesis = 0.5;
		
			// Defines the number of percepts/s which leads to a validity of 1.
			// No percept leads to a validity of 0.
		validity_maxPerceptsPerSecond = 3.0;
			// Defines the number of percepts/s which is required for a valid hypothesis.
		validity_minPerceptsPerSecond = 1.0;
			// Defines the number of percepts/s which is required for a good validity.
		validity_goodPerceptsPerSecond = 1.5;
			// The percepts/s from the last second is merged with the previous validity
			// using a weighted mean. The last seconds percepts/s has weight 1 and this
			// parameter defines the weight of the previous validity.
		validity_weightOfPreviousValidity = 20.0;
			// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
			// Validity_goodPerceptsPerSecond.
		validity_weightOfPreviousValidity_goodHypotheses = 50.0;
			// If the validity of a hypothesis is less than this threshold (and there 
			// is a better one), the hypothesis will be removed.
		cleanUpHypotheses_belowValidity = 0.15;
	};
	
		// Local map only parameters
	localMapParameters = {
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 200;
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
			// Use full range as nothing worthy comes out of YOLO for the robot type at the moment (GO 2019)
		maxRobotTypeDifferenceToMerge = 2.0;
	};

		// Remote map only parameters
	remoteMapParameters = {
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 200;
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
			// Use full range as nothing worthy comes out of YOLO for the robot type at the moment (GO 2019)
		maxRobotTypeDifferenceToMerge = 2.0;
			// The influence of a teammate position. This will be multiplied by the teammate's position confidence
		teammatePositionInfluence = 1.0;
			// The influence of a teammate's robot model. This will be multiplied by the teammate's robot model validity
		teammateModelInfluence = 0.8;
			// The influence of a teammate's percept. This will be multiplied by the teammate's robot percept validity
		teammatePerceptInfluence = 0.0;
	};

		// Merged map only parameters
	mergedMapParameters = {
			// Max distance between two hypotheses to merge them
		maxDistanceToMerge = 200;
			// Max difference between two hypotheses' robot type to merge them
			// Robot type's interval is [1; -1]
			// -1: teammate; 0: unknown team; 1: opponent
			// Use full range as nothing worthy comes out of YOLO for the robot type at the moment (GO 2019)
		maxRobotTypeDifferenceToMerge = 2.0;
			// The influence of a local robot percept. This will be multiplied by the percept's validity
		localPerceptInfluence = 1.0;
			// The influence of a teammate position. This will be multiplied by the teammate's position confidence
		teammatePositionInfluence = 1.0;
			// The influence of a teammate's robot model. This will be multiplied by the teammate's robot model validity
		teammateModelInfluence = 0.8;
			// The influence of a teammate's percept. This will be multiplied by the teammate's robot percept validity
		teammatePerceptInfluence = 0.0;	
	};


		// Slow down the velocity of the fitered robot hypotheses when unseen.
		// The friction value must be <= 0 (0 if no friction should be applied).
	friction = -20.0; // Prevent high velocity noise

		// If true hypotheses outside the field (with CleanUpHypotheses_fieldBorderThreshold)
		// are removed (also the best one).
		// Warning: This could be dangerous if the localization is too inaccurate!
	cleanUpHypotheses_outsideField = true;
		// The field border (all legal positions are inside) is enlarged by this
		// size (in mm) for clean up. Only hypotheses outside this threshold are removed.
		// See CleanUpHypotheses_outsideField.
	cleanUpHypotheses_fieldBorderThreshold = 200.0;
		// Determine how the combined robot map is filled.
		// True to use the merged map that is filled with all percepts.
		// False to combine the local and the remote map when they've been computed.
		// Don't use merged map for now. As it doesn't divide local and remote percepts. Due to the different frequencies (see percepts/s) this is a problem.
	useMergedMap = false;
};


	// Fix kalman filter matrices which are used to initialize the kalman filter of 
	// each new hypothesis.
kalmanNoiseMatrices = {
	// The process noise covariance matrix (Q).
	processNoiseCovarianceMatrix = {
		cols = [ // column matrices!
			{ elems = [ 1, 0, 0.5, 0 ]; },
			{ elems = [ 0, 1, 0, 0.5 ]; },
			{ elems = [ 0.5, 0, 10, 0 ]; },
			{ elems = [ 0, 0.5, 0, 10 ]; }
		];
	};
	// The measurement noise matrix (R).
	measurementNoiseMatrix = {
		cols = [ // column matrices!
			{ elems = [ 100, 0 ]; },
			{ elems = [ 0, 100 ]; }
		];
	};
	// The maximum measurement noise as a scalar value.
    maxMeasurementNoise = 500;
};
