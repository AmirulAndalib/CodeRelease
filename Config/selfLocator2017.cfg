anglesource = imuModel;
gyroMaxVariance = 0.05deg;
positionsByRules = {
  fieldPlayerPositionsOwnKickoff = [
    {
      x = -1000;
      y = 0;
    },
    {
      x = -3200;
      y = 0;
    },
    {
      x = -3200;
      y = -2500;
    },
    {
      x = -3200;
      y = 2500;
    }
  ];
  fieldPlayerPositionsOppKickoff = [
    {
      x = -2500;
      y = 0;
    },
    {
      x = -3200;
      y = 0;
    },
    {
      x = -3200;
      y = -2500;
    },
    {
      x = -3200;
      y = 2500;
    }
  ];
  penaltyPositions = [
	// If empty the "normal" penalty positions are added
	// else this vector of Pose2f's is used
    //{
    //  rotation = -90deg;
    //  translation = {
    //    x = -3900;
    //    y = 3000;
    //  };
    //},
  ];
  goaliePosition = {
    x = -4400;
    y = 0;
  };
  penaltyShootoutGoaliePosition = {
    x = -4500;
    y = 0;
  };
  penaltyShootStartingRadius = 1000;
  penaltyShootAngles = [
    -60,
    -30,
    0,
    30,
    60
  ];
};
parameters = {
  processUpdate = {
    odometryBasedVarianceUpdate = false;
    minPositionChageForCovarianceUpdate = 5;
    minRotationChageForCovarianceUpdate = 0.01;
    positionVariance = 80;
    rotationVariance = 0.001;
    adjustRotationToBestFittingAngle = 0;
    positionConfidenceHysteresisForKeepingBestHypothesis = 0.15;
    jacobianMeasurementCalculation = singles;
  };
  sensorUpdate = {
    verticalAngleVariance = 0.08;
    horizontalAngleVariance = 0.2;
    projectiveNormalVariance = 0.008;
    maxVerticalAngleFullObservationWeight = 1.2;
    correlationFactorBetweenMeasurements = 0.5;
    influenceOfNewCenterCircleMeasurementOnPositionConfidence = 0.007;
    influenceOfNewPenaltyCrossMeasurementOnPositionConfidence = 0.007;
    influenceOfNewGoalMeasurementOnPositionConfidence = 0.003;
    influenceOfNewLineMeasurementOnPositionConfidence = 0.005;
    influenceOfNewInfiniteLineMeasurementOnPositionConfidence = 0.003;
    influenceOfNewPenaltyCrossWithLineMeasurementOnPositionConfidence = 0.05;
    maxInfluenceOnPositionConfidencePenaltyCrossOnly = 0.66;
    use1stLevelUpdate = true;
    use2ndLevelUpdate = true;
    use3rdLevelUpdate = true;
    confidencePenaltyPerFailedMatch = -0.001;
    minLineLengthOnField = 300;
    worstAngleDifference = 0.5;
    maxDistanceError = 0.2;
    lineLengthMatchFactorMax = 1.2;
    confidenceScaleFactorAfterFallDown = 1;
  };
  symmetryUpdate = {
    updateWithRemoteModels = true;
    maxDistanceToClosestRemoteModel = 500;
    influenceOfNewBallMeasurement = 0.05;
    influenceOfNewBallMeasurementByGoalie = 0.1;
    influenceOfNewTeammateRobotMeasurement = 0.02;
    influenceOfNewOpponentRobotMeasurement = 0;
  };
  localizationStateUpdate = {
    symmetryLostWhenFallDownInCenterCircle = false;
    unknownSymmetryRadiusAroundCenter = 200;
    positionLostWhenBestConfidenceBelowThisThreshold = 0.2;
    positionFoundAgainWhenBestConfidenceAboveThisThreshold = 0.5;
    symmetryLostWhenBestConfidenceBelowThisThreshold = 0.2;
    symmetryFoundAgainWhenBestConfidenceAboveThisThreshold = 0.8;
  };
  spawning = {
    useOdometryForSpawning = false;
    landmarkBasedHypothesesSpawn = spawnIfLostOrTracking;
    spawnWhilePositionTrackingWhenBestConfidenceBelowThisThreshold = 0.6;
    spawnUniqueWhilePositionTrackingWhenBestConfidenceBelowThisThreshold = 0.75;
    confidenceIntervalForCheckOfHypothesis = 0.1;
    noAdditionalHypothesisAfterFallDown = 2;
    angleOfAdditionalHypothesisAfterFallDown = 30deg;
    positionConfidenceWhenPositionedManually = 0.3;
    positionConfidenceWhenPositionedManuallyForGoalKeeper = 0.35;
    positionConfidenceWhenPositionLost = 0.25;
    symmetryConfidenceWhenPositionedManually = 1;
    goalBaseConfidence = 0.8;
    centerCircleBaseConfidence = 0.8;
    penaltyCrossBaseConfidence = 0.8;
    lineBasedPositionConfidenceWhenPositionTracking = 0.35;
    limitSpawningToOwnSideTimeout = 15000;
    minDistanceBetweenFallDowns = 750;
    accZforPickedUpDifference = 4;
  };
  pruning = {
    likelihoodTresholdForMerging = 0.5;
    maxNumberOfHypotheses = 12;
  };
  matching = {
    positionVarianceForLines = 250000;
    orientationVarianceForLines = 0.25;
    likelihoodTresholdForLines = 0.1;
    maxAllowedVerticalAngleDifferenceForPoints = 0.3;
    maxAllowedHorizontalAngleDifferenceForPoints = 0.3;
  };
  sensorReset = {
    maxDistanceForLocalResetting = 100;
    maxAngleForLocalResetting = 0.8;
  };
  debugging = {
    durationHighlightAddedHypothesis = 5000;
    displayWarnings = false;
  };
};
