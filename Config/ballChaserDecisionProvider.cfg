timeToBallParams = {
  useDistanceBasedDecision = true; // alternative is time based
  usePredictedBallPosition = true;
  type = distance;
  isBallMineHysteresisFactor = 5;
  targetDistanceObstaclePenalty = 500;
  minimumDistanceForRotation = 1000;
   // normal penalties add distance and time penalties add seconds to timeToReachBall
  fallDownPenalty = 1000;
  fallDownTimePenalty = 6;
  notSeenTime = 4000;
  notSeenPenalty = 500;
  notSeenTimePenalty = 2;
  ballBehindPenalty = 1000;
  obstaclePenalty = 0;
  ballBehindRobotHysteresis = 500;
  ballChaserBonus = 500;
  ballChaserTimeBonus = 1;
  distancePenaltyBallBehindRobot = 600;
  distancePenaltyBallBehindRobotFullDistance = 4000;
  targetDistanceRobotRotFactor = 1;
  penaltyBallBehindFactorOwnGroundline = 1;
  penaltyBallBehindFactorOpponentGroundline = 3;
};
useLocalBallModelForDecision = false;
useLocalBallModelWhenNear = true;
useLocalBallModelWhenDifferenceGreater = 700;
useLocalBallModelBelowDistance = 2000;
maxSpeedToBeBallChaserKeeper = 100; //[mm/s]
