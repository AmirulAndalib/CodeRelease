parameters = {
  local = {
    Hypotheses_minDistanceForNewHypothesis = 500;
    Hypotheses_mergeAngleDiff = {
      x = 3deg;
      y = 6deg;
    };
    Hypotheses_initialValidityForNewHypotheses = 0.2;
    Hypotheses_minValidityForChangingBestHypothesis = 0.25;
    Validity_maxPerceptsPerSecond = 6;
    Validity_minPerceptsPerSecond = 2;
    Validity_goodPerceptsPerSecond = 4;
    Validity_weightOfPreviousValidity = 25;
    Validity_weightOfPreviousValidity_goodHypotheses = 50;
  };
  remote = {
    Hypotheses_minDistanceForNewHypothesis = 2500;
    Hypotheses_mergeAngleDiff = {
      x = 3deg;
      y = 6deg;
    };
    Hypotheses_initialValidityForNewHypotheses = 0.9;
    Hypotheses_minValidityForChangingBestHypothesis = 0.25;
    Validity_maxPerceptsPerSecond = 1;
    Validity_minPerceptsPerSecond = 1;
    Validity_goodPerceptsPerSecond = 1;
    Validity_weightOfPreviousValidity = 75;
    Validity_weightOfPreviousValidity_goodHypotheses = 150;
  };
  CleanUpHypotheses_minAngleForKeepingHypothesis = 0.7;
  CleanUpHypotheses_belowValidity = 0.05;
  CleanUpHypotheses_outsideField = true;
  CleanUpHypotheses_fieldBorderThreshold = 1000;
  Hypotheses_minNumberOfSensorUpdatesForBestHypothesis = 3;
  Hypotheses_minNumberOfSensorUpdatesForBestHypothesisRemote = 1;
  Hypotheses_decreaseValidityOnChangingBestHypothesis = 0.1;
  State_SetToPlaying_addKickOffHypothesis = true;
  State_SetPlay_addSetPlayHypothesis = true;
  State_SetPlay_maxTimeSinceBallSeen = 1000;
  State_Penalty_removeAllHypotheses = true;
};
teamParameters = {
  minValidityForLocalBallModel = 0.25;
  minValidityForRemoteBallModel = 0.1;
};
kalmanNoiseMatrices = {
  processNoiseCovarianceMatrix = {
    cols = [
      {
        elems = [
          1,
          0,
          0,
          0
        ];
      },
      {
        elems = [
          0,
          1,
          0,
          0
        ];
      },
      {
        elems = [
          0,
          0,
          1250,
          0
        ];
      },
      {
        elems = [
          0,
          0,
          0,
          1250
        ];
      }
    ];
  };
  measurementNoiseMatrix = {
    cols = [
      {
        elems = [
          25,
          0
        ];
      },
      {
        elems = [
          0,
          25
        ];
      }
    ];
  };
  maxMeasurementNoise = 25;
};
walkingMaxMeasurementNoiseFactor = 7.5;
ballFriction = -0.40;
addModelFromPerceptsTowardsRobot = true;
anglePrecisionLineDetection = 0.25deg;
distancePrecisionLineDetection = 50;
minPointsForLineDetection = 5;
minPointsForLineDetectionWalking = 15;
anglesource = imuModel;
gyroMaxVariance = 0.05deg;
stableInterpolationFrames = 20;