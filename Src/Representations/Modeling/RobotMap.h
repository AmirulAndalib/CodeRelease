/**
* @file RobotMap.h
* Declaration of a class that represents the map of tracked robots in this robot's environment.
* @author <a href="mailto:stefan.czarnetzki@tu-dortmund.de">Stefan Czarnetzki</a>
*/

#pragma once
#include "Representations/Perception/RobotsPercept.h"
#include "Tools/Streams/AutoStreamable.h"
#include "Tools/Streams/Compressed.h"
#include "Tools/Math/Pose2f.h"
#include "Tools/Math/Pose3f.h"
#include <vector>

/**
* @class RobotMap
* A class represents the map of tracked robots in this robot's environment.
*/

STREAMABLE(RobotMapEntry,,
  (Pose2f) pose, /**< The position in absolute field coordinates. */
  ((RobotEstimate) RobotType)(RobotEstimate::unknownRobot) robotType,
  /** This is nice to have but might not be filled correctly and will not be sent! **/
  (Vector2f) velocity,
  (float)(0.f) validity
);

// Global robot map (local + remote)
STREAMABLE(RobotMap,
  RobotMap() { robots.reserve(10); }

  /** Reset the RobotMap */
  void reset() { robots.clear(); }

  void draw() const,
  (std::vector<RobotMapEntry>) robots /**< The robots in absolute field coordinates. */
);


struct GroundTruthRobotMap : public RobotMap
{
  /** Draws something*/
  void draw() const;
};


// Local robot map
struct LocalRobotMap : public RobotMap
{
  void draw() const;
};


// Robot map of generated by teammate data
struct RemoteRobotMap : public RobotMap
{
  /** Draws something*/
  void draw() const;
};


STREAMABLE(RobotMapCompressedEntry,
  RobotMapCompressedEntry() = default;
  explicit RobotMapCompressedEntry(const RobotMapEntry& robotMapEntry) {
    pose = robotMapEntry.pose;
    robotType = robotMapEntry.robotType;
    validity = robotMapEntry.validity;
  },

  (Pose2fCompressed) pose,
  ((RobotEstimate) RobotType)(RobotEstimate::unknownRobot) robotType,
  (ValidityCompressed)(0.f) validity
);

STREAMABLE(RobotMapCompressed,
  // Increase version number whenever something changes!
  static constexpr unsigned char version = 0;

  RobotMapCompressed() = default;
  explicit RobotMapCompressed(const RobotMap& other)
  {
    robots.clear();
    for (const auto& robot : other.robots)
      robots.emplace_back(robot);
  },

  (VectorCompressed<RobotMapCompressedEntry>) robots
);
