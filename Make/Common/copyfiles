#!/bin/bash
# copies a naodevils distribution to a robot

usage()
{
  echo "usage: copyfiles [Release|Develop|Debug] [<ipaddress>|(-m n <ipaddress>)*] {options}"
  echo "  options:"
  echo "    -nv <5,6>              				use this nao version, default 5"
  echo "    -t <color>             				set team color to blue, red, yellow, or black"
  echo "    -p <number>            				set player number"
  echo "    -n <number>            				set team number"
  echo "    -o <port>              				overwrite team port"
  echo "    -g <game mode>         				set game mode"
  echo "    -r                     				restart naodevils"
  echo "    -rr                    				force restart naodevils and naoqi"
  echo "    -m n <ip>              				copy to <ip>, and set playernumber to n (one -m per robot)"
  echo "    -sn                    				skip NTP sync"
  echo "    -nr                    				do not check whether target is reachable"
  echo "    -d                     				remove all log files before copying"
  echo "    -v <percent>           				set NAO's volume"
  echo "    -mv <percent>          				set NAO's microphone volume"
  echo "    -w <profile>           				set wireless profile"
  echo "    -own <color>           				set color for own team (e.g. \"x = 255; y = 255; z = 255;\")"
  echo "    -opp <color>           				set color for opposing team (e.g. \"x = 255; y = 255; z = 255;\")"
  echo "    -eo <overlay>                       enable overlay"
  echo "    -h | --help | /h | /?  				print this text"
  echo "  examples:"
  echo "    ./copyfiles Develop 192.168.5.14 -p 1"
  echo "    ./copyfiles Release -nv 6 -m 1 10.0.5.14 -m 3 10.0.0.2"
  echo "  If nv=5: NAOqi will be restarted if libbhuman or libgamectrl were changed."
  echo "  If nv=6: naodevilsbase will be restarted if changed."
  exit 1
}

copy()
{
  echo "using copyfiles with nao version $NAOVERSION"
  REMOTE=$1
  PLAYER=$2

  if [ ! -z $PLAYER ] && (( $PLAYER < 1 )); then
    echo "Error: Player number is $PLAYER!"
    exit 1
  fi

  if [ ! -z $CHECK ]; then
    if ! ping ${pingoptions} "$REMOTE" >/dev/null; then
      >&2 echo "$REMOTE not reachable"
      exit 1
    fi
  fi

  echo "stopping naodevils"
  ssh $sshoptions nao@$REMOTE "systemctl --user stop naodevils"

  echo "update time"
  ssh $sshoptions nao@$REMOTE "sudo chronyc -n burst 2/10 >/dev/null 2>&1; sudo chronyc -n makestep 0.1 1 >/dev/null 2>&1"
  
  ssh $sshoptions nao@$REMOTE "mkdir -p /home/nao/bin /home/nao/logs"

  if [ ! -z $REMOVE_LOGS ]; then
    echo "removing log files and PNGs"
    ssh $sshoptions nao@$REMOTE "rm -rf /home/nao/logs/* && rm -rf /var/volatile/PNGs"
  fi

  updateWifiV6="FALSE"
  # if [ "$NAOVERSION" == "V6" ]; then
    # updateWifiV6="TRUE"
  # fi

  echo "updating naodevils"
  rsync -q --del --exclude=.* --exclude=/Images --exclude=/Logs --exclude=/Scenes --exclude=/Keys --chmod=u+rw,go+r,Dugo+x -rzce "ssh $sshoptions" ../../Config/. nao@$REMOTE:/home/nao/Config
  rsync -q --chmod=u+rwx,go+r,Dugo+x --stats -zce "ssh $sshoptions" ../../Build/nao-${CONFIG,,}/naodevils nao@$REMOTE:/home/nao/bin
  if [ -d "../../Build/nao-${CONFIG,,}/lib" ]; then
     rsync -q --del --chmod=u+rwx,go+r,Dugo+x --stats -rlzce "ssh $sshoptions" ../../Build/nao-${CONFIG,,}/lib nao@$REMOTE:/home/nao/bin
  fi


  echo "updating sensorReader"
  RESULTSENSORREADER=`rsync --chmod=u+rwx,go+r,Dugo+x --stats -zce "ssh $sshoptions" ../../Build/nao-${CONFIG,,}/sensorReader nao@$REMOTE:/home/nao/bin`
  if [ `echo "$RESULTSENSORREADER" | grep -c 'transferred: 0'` != 1 ]; then
    RESTARTSENSORREADER=1
  fi

  echo "updating naodevilsbase"
  RESULT=`rsync --chmod=u+rwx,go+r,Dugo+x --stats -zce "ssh $sshoptions" ../../Build/nao-${CONFIG,,}/naodevilsbase nao@$REMOTE:/home/nao/bin`
  if [ `echo "$RESULT" | grep -c 'transferred: 0'` != 1 ]; then
    RESTARTNAOQI=1
  fi

  if [ ! -z $STOPPEDNAOQI ]; then
    echo "starting naodevilsbase"
    ssh $sshoptions nao@$REMOTE "systemctl --user start naodevilsbase"
  elif [ ! -z $RESTARTNAOQI ]; then
    echo "restarting naodevilsbase"
    ssh $sshoptions nao@$REMOTE "systemctl --user restart naodevilsbase"
  fi

  if [ ! -z $STOPPEDSENSORREADER ]; then
    echo "starting sensorreader"
    ssh $sshoptions nao@$REMOTE "systemctl --user start sensorreader"
  elif [ ! -z $RESTARTSENSORREADER ]; then
    echo "restarting sensorreader"
    ssh $sshoptions nao@$REMOTE "systemctl --user restart sensorreader"
  fi


  # set volume
  echo "setting volume to $VOLUME%"

  #New naoqi versions use "Master", old use "PCM" as amixer SCONTROL
  ssh $sshoptions nao@$REMOTE "amixer set 'Analog Front' $VOLUME% unmute > /dev/null"

  # set microphone volume
  echo "setting microphone volume to $MIC_VOLUME%"

  ssh $sshoptions nao@$REMOTE "amixer set 'Analog Front mics' $MIC_VOLUME% unmute > /dev/null"
  ssh $sshoptions nao@$REMOTE "amixer set 'Analog Rear mics' $MIC_VOLUME% unmute > /dev/null"

  # set settings on robot
  if [ ! -z $TEAM ] || [ ! -z $PORT ] || [ ! -z $PLAYER ] || [ ! -z $NUMBER ] || [ ! -z $GAMEMODE ]; then
    echo "updating settings"
    SEDFLAGS=""
    [ ! -z $NAOVERSION ] && SEDFLAGS="$SEDFLAGS -e 's/naoVersion.*/naoVersion = $NAOVERSION;/'"
    [ ! -z $OVERLAYS ] && SEDFLAGS="$SEDFLAGS -e 's/overlays.*/overlays = [$OVERLAYS];/'"
    [ ! -z $TEAM ] && SEDFLAGS="$SEDFLAGS -e 's/teamColor.*/teamColor = $TEAM;/'"
    [ ! -z $PLAYER ] && SEDFLAGS="$SEDFLAGS -e 's/playerNumber.*/playerNumber = $PLAYER;/'"
    [ ! -z $NUMBER ] && SEDFLAGS="$SEDFLAGS -e 's/teamNumber.*/teamNumber = $NUMBER;/'"
    [ ! -z $PORT ] && SEDFLAGS="$SEDFLAGS -e 's/teamPort.*/teamPort = $PORT;/'"
	  [ ! -z $GAMEMODE ] && SEDFLAGS="$SEDFLAGS -e 's/gameMode.*/gameMode = $GAMEMODE;/'"
    ssh $sshoptions nao@$REMOTE "sed -i $SEDFLAGS /home/nao/Config/settings.cfg"
  fi

  # set color settings on robot
  if [ ! -z "$COLOR_OWN" ] || [ ! -z "$COLOR_OPP" ]; then
    echo "updating color settings"
    SEDFLAGS=""
    [ ! -z "$COLOR_OWN" ] && SEDFLAGS="$SEDFLAGS -e 's/\(ownColor = \)[0-9ycbcr=; ]\+\(;\)/\1$COLOR_OWN\2/'"
    [ ! -z "$COLOR_OPP" ] && SEDFLAGS="$SEDFLAGS -e 's/\(oppColor = \)[0-9ycbcr=; ]\+\(;\)/\1$COLOR_OPP\2/'"
    ssh $sshoptions nao@$REMOTE "sed -i $SEDFLAGS /home/nao/Config/rawGameInfoProvider.cfg"
  fi
  
  wait

  if [ ! -z $RESTART ]; then
    echo "starting naodevils"
    ssh $sshoptions nao@$REMOTE "systemctl --user start naodevils"
  fi
 
  echo "check time"
  if ! ssh $sshoptions nao@$REMOTE "chronyc -n waitsync 1 0.01 5 >/dev/null"; then
      >&2 echo "time not synchronized yet!"
  fi

  if [ ! -z $PROFILE ]; then
    echo "set wireless profile"
    ssh $sshoptions nao@$REMOTE "sudo configure-network -p '$PROFILE'"
  fi

  true
}

set -e
set -o pipefail

scriptPath=$(echo $0 | sed "s|^\.\./|`pwd`/../|" | sed "s|^\./|`pwd`/|")
basePath=$(dirname "${scriptPath}")
currPath=$(pwd)
keySource=../../Config/Keys/id_rsa_nao
keyFile=/tmp/id_rsa_nao
pingoptions="-w 1 -c 1"
mkdir -p ~/.ssh
sshoptions="-i $keyFile -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -c aes128-ctr -o LogLevel=error -o ConnectTimeout=5 -o ControlMaster=auto -o ControlPath=~/.ssh/copyfiles-%r@%h:%p -o ControlPersist=60"
cd "${basePath}"
cp $keySource $keyFile

# init variables
[ -z $CONFIG ] && CONFIG="Develop"
COMPONENT="Nao"
NAOVERSION=V6
PLAYER=
TEAM=
NUMBER=
REMOTE=
CHECK=1
SKIP_NTP=
NUMMULTIPLE=0
RESTARTNAOQI=
RESTARTSENSORREADER=
MULTIPLEDATA=
REMOVE_LOGS=
VOLUME=100
MIC_VOLUME=75
PROFILE=
PORT=
COLOR_OWN=
COLOR_OPP=
OVERLAYS=

echo Parameters: $@

# parse options
if [ $# -eq 0 ]; then
  echo No parameters found!
  usage
 fi
while true; do
  case $1 in
    "")
      break
      ;;
    "-nv" | "/nv")
      shift
      NAOVERSION=$1
      ;;
    "-p" | "/p")
      shift
      PLAYER=$1
      ;;
      
    "-t" | "/t")
      shift
      TEAM=$1
      ;;
    "-n" | "/n")
      shift
      NUMBER=$1
      if [ -z $PORT ]; then
        PORT=`printf "100%02d" $NUMBER`
      fi
      ;;
    "-o" | "/o")
      shift
      PORT=$1
      ;;
	"-g" | "/g")
      shift
      GAMEMODE=$1
      ;;
    "-sn" | "/sn")
      SKIP_NTP=1
      ;;
    "-r" | "/r")
      RESTART=1
      ;;
    "-rr" | "/rr")
      RESTARTNAOQI=1
      RESTARTSENSORREADER=1
      RESTART=1
      ;;
    "-nr" | "/nr")
      CHECK=
      ;;
    "-d" | "/d")
      REMOVE_LOGS=1
      RESTART=1
      ;;
    "-h" | "/h" | "/?" | "--help")
      usage
      ;;
    "-m" | "/m")
      shift
      MULTIPLEDATA[$NUMMULTIPLE]=$1
      shift
      MULTIPLEDATA[$NUMMULTIPLE + 1]=$1
      let "NUMMULTIPLE+=2"
      ;;
    "-v" | "/v")
      shift
      VOLUME=$1
      ;;
    "-mv" | "/mv")
      shift
      MIC_VOLUME=$1
      ;;
    "-w" | "/w")
      shift
      PROFILE=$1
      ;;
    "-own" | "/own")
      shift
      COLOR_OWN=$1
      ;;
    "-opp" | "/opp")
      shift
      COLOR_OPP=$1
      ;;
    "-eo" | "/eo")
      shift
      OVERLAYS="$OVERLAYS\"$1\","
      ;;
    "Nao")
      COMPONENT="Nao"
      ;;
    "Release")
      CONFIG="Release"
      ;;
    "Develop")
      CONFIG="Develop"
      ;;
    "Debug")
      CONFIG="Debug"
      ;;
    -*)
      echo "unknown parameter: $1"
      usage
      ;;
    *)
      REMOTE=$1
      ;;
  esac
  shift
done

#key may only be accessed by the owner. Otherwise ssh will complain
chmod 600 $keyFile


if [ ! -z $REMOTE ]; then
  copy $REMOTE $PLAYER
else # try to deploy to multiple targets
  if [ "$NUMMULTIPLE" -ne 0 ]; then
    for ((i=0; i < NUMMULTIPLE; i+=2))
    do
      copy ${MULTIPLEDATA[i+1]} ${MULTIPLEDATA[i]} | sed "s%^%[${MULTIPLEDATA[i+1]}] %" &
    done
    wait
  else
    cd "${currPath}"
    exit 1
  fi
fi

cd "${currPath}"
